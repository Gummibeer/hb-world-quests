<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>44744-[N]-[QUEST]-Wq-Lifelines-Zinner.xml</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	
	<QuestOrder>
	<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			
    public class WorldQuestData
    {
        public int ID;
        public string Name;
        public DateTime ExpireTime;
    }
    public static class WorldQuestInfo
    {
        static List<WorldQuestData> _cache = new List<WorldQuestData>();
        static internal bool _dirty = true;
        static internal bool _setup = false;
        static WorldQuestInfo()
        {
            Setup();
        }
        public static void Setup()
        {
            if (_setup)
                return;
            Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
            UpdateWorldQuests();
            _setup = true;
        }
        public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
        {
            _dirty = true;
        }
        public static bool HasWorldQuest(int questid)
        {
            UpdateWorldQuests();
            var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
            if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
                return false;
            return true;
        }
        public static void UpdateWorldQuests()
        {
            if (!_dirty)
                return;
            _cache = new List<WorldQuestData>();
            
            var player = StyxWoW.Me;
            int BrokenIslesMapArea = 1007;
            var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
            
            var NumZones = int.Parse(ret[0]);
            for (int i = 1; i < NumZones; ++i)
            {
                ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
                var ZoneID = int.Parse(ret[0]);
                var ZoneName = ret[1];
                var ZoneDepth = int.Parse(ret[2]);
                if (ZoneDepth > 1) //Do not look at subzones
                {
                    Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
                    continue;
                }
                string ToRun = string.Format(@"     local questids = {{}};
                    			                    local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
                                                    if taskInfo then
				                                                    for i, info in ipairs(taskInfo) do
					                                                    if HaveQuestData(info.questId) then
						                                                    if QuestUtils_IsQuestWorldQuest(info.questId) then
                                                                                    table.insert(questids, info.questId);
							                                                    end
						                                                    end
					                                                    end
				                                                    end
                                                   return unpack(questids);
                                                ", ZoneID, BrokenIslesMapArea);
                ret = Lua.GetReturnValues(ToRun);
                foreach (var q in ret)
                {
                    int questid = int.Parse(q);
                    //TimeLeft is in minutes
                    var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
                    var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
                    Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
                    var data = new WorldQuestData();
                    data.ID = questid;
                    data.Name = QuestInfo[0];
                    data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
                    _cache.Add(data);
                }
            }
            _dirty = false;
        }
        public static bool IsWorldQuest(int questid)
        {
            string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
            var ret = Lua.GetReturnValues(lua);
            if (ret[3] == null)
                return false;
            return true;
        }
    }
    bool ShouldCastMask() 
                     { 
                         return Me.IsAlive && IsInCity() && !Me.HasAura(202477); 
                     } 
  
                     void CastMask() 
                     { 
                         Lua.DoString("ExtraActionButton1:Click();"); 
                     } 
  
                     bool IsInCity() 
                     { 
                        return  Me.MinimapZoneText == "The Grand Promenade" ||  
                                Me.MinimapZoneText == "Starcaller Retreat"  || 
                                 Me.MinimapZoneText == "The Waning Crescent" || 
                                 Me.MinimapZoneText == "Artisan's Gallery" || 
                                Me.MinimapZoneText == "Astravar Harbor" || 
                                 Me.MinimapZoneText == "Evermoon Bazaar" || 
                                 Me.MinimapZoneText == "Shimmershade Garden" || 
                                 Me.MinimapZoneText == "Terrace of Order" || 
                                 Me.MinimapZoneText == "Suramar City"; 
                     } 

				]]>
			</CustomBehavior>
	<While Condition="WorldQuestInfo.HasWorldQuest(44744)" >
	<!-- Get in range of quest to activate -->
	<CustomBehavior File="Hooks\Avoid" AvoidName="DispelIllusions" Command="Add" AvoidWhen="UNIT.CastingSpellId == 203750" Radius="18" IgnoreLootInAvoid="true" IgnoreIfBlocking="true" />
 	<CustomBehavior File="Hooks\DoWhen" UseWhen="ShouldCastMask()" LogExecution="true" ActivityName="apply_mask" StopMovingToConductActivity="true" AllowUseWhileMounted="true"> 
        <CustomBehavior File="RunCode" Code="CastMask()" /> 
        <CustomBehavior File="WaitTimer" WaitTime="4000" /> 
        </CustomBehavior> 
	<RunTo X="755.1429" Y="3915.212" Z="5.678289" />
	<PickUp Nav="Fly" QuestName="Lifelines" QuestId="44744" GiverName="" GiverId="" />

	<Objective QuestName="Lifelines" QuestId="44744" Type="KillMob" Nav="Fly" MobId="115089" KillCount="13" />

	<Objective QuestName="Lifelines" QuestId="44744" Type="KillMob" Nav="Fly" MobId="115090" KillCount="20" />

	<TurnIn Nav="Fly" QuestName="Lifelines" QuestId="44744" TurnInName="" TurnInId="" />





</While>
		

<While Condition="WorldQuestInfo.HasWorldQuest(44744)" >
	<CustomBehavior File="Hooks\Avoid" AvoidName="DispelIllusions" Command="Add" AvoidWhen="UNIT.CastingSpellId == 203750" Radius="18" IgnoreLootInAvoid="true" IgnoreIfBlocking="true" />
 	<CustomBehavior File="Hooks\DoWhen" UseWhen="ShouldCastMask()" LogExecution="true" ActivityName="apply_mask" StopMovingToConductActivity="true" AllowUseWhileMounted="true"> 
        <CustomBehavior File="RunCode" Code="CastMask()" /> 
        <CustomBehavior File="WaitTimer" WaitTime="4000" /> 
        </CustomBehavior> 

	<RunTo X="755.1429" Y="3915.212" Z="5.678289" />
	
	<CustomBehavior File="KillUntilComplete" MobIds="115089, 115090" TerminateWhen="IsQuestCompleted(44744)" >
	<HuntingGrounds>
		<Hotspot X="807.134" Y="3923.751" Z="10.56891" />
		<Hotspot X="737.4764" Y="3913.519" Z="5.708167" />
		<Hotspot X="761.7164" Y="3917.625" Z="5.684854" />
		<Hotspot X="823.7905" Y="3917.387" Z="10.56884" />
		<Hotspot X="815.4624" Y="3943.422" Z="10.56884" />
		<Hotspot X="797.5574" Y="3942.801" Z="10.56884" />
	</HuntingGrounds>
</CustomBehavior>
<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
</While>

<RunTo X="755.1429" Y="3915.212" Z="5.678289" />
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
	<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
	
<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest 44744-[N]-[QUEST]-Wq-Lifelines-Zinner.xml, loading auto-loader!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
</QuestOrder>
</HBProfile>