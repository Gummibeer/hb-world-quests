<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[42119] A Cleansing Cocktail - Win</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i < NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestMapFrame_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<!--
<While Condition="WorldQuestInfo.HasWorldQuest(42119)" >

	<RunTo X="462.1674" Y="6761.314" Z="89.73258" />
<PickUp Nav="Fly" QuestName="A Cleansing Cocktail" QuestId="42119" GiverName="" GiverId="" />
<Objective QuestName="A Cleansing Cocktail" QuestId="42119" Type="CollectItem" Nav="Fly" ItemId="136860" CollectCount="7" />
<Objective QuestName="A Cleansing Cocktail" QuestId="42119" Type="CollectItem" Nav="Fly" ItemId="136859" CollectCount="5" />
<TurnIn Nav="Fly" QuestName="A Cleansing Cocktail" QuestId="42119" TurnInName="" TurnInId="" />
</While>



<Vendor Name="Llothien Grizzly" Entry="90134" Type="Repair" Nav="Fly" X="426.625" Y="6934.635" Z="101.1977" />
<Vendor Name="Cliffwing Hippogryph" Entry="89386" Type="Repair" Nav="Fly" X="301.091" Y="7055.09" Z="110.8192" />
<GameObject Name="Cliffwing Hippogryph Egg" Entry="249704" X="129.0642" Y="6984.13" Z="65.82938" />
<GameObject Name="Cliffwing Hippogryph Egg" Entry="249704" X="153.5313" Y="7066.058" Z="61.91515" />
-->
<While Condition="WorldQuestInfo.HasWorldQuest(42119)" >
	<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;Loading Profile [42119] A Cleansing Cocktail - WiN!&quot;);" />
	<RunTo X="403.729" Y="6894.196" Z="100.9014" />
	<CustomBehavior File="InteractWith" NumOfTimes="12" MobState="Dead" QuestId="42119" TerminateWhen="IsQuestCompleted(42119)">
		<HuntingGrounds>
			<Hotspot X="298.7737" Y="6922.395" Z="89.35289" />
			<Hotspot X="146.8626" Y="6929.854" Z="78.60299" />
			<Hotspot X="137.4769" Y="6974.668" Z="71.05595" />
			<Hotspot X="150.6636" Y="7057.732" Z="63.08843" />
			<Hotspot X="335.5302" Y="6908.253" Z="91.09377" />
			<Hotspot X="284.509" Y="6953.439" Z="88.31677" />
			<Hotspot X="267.9576" Y="7026.504" Z="83.53165" />
			<Hotspot X="222.5972" Y="7049.65" Z="75.31095" />
			<Hotspot X="161.8048" Y="7039.15" Z="66.5415" />
			<Hotspot X="183.2489" Y="7146.554" Z="52.92727" />
			<Hotspot X="341.2527" Y="7125.638" Z="101.0368" />
			<Hotspot X="403.3325" Y="7078.957" Z="117.3237" />
			<Hotspot X="427.5143" Y="6996.18" Z="111.2353" />
		</HuntingGrounds>
		<PursuitList>
			<PursueGameObject Id="249704" Priority="1" PursueWhen="!IsObjectiveComplete(1, 42119) &amp;&amp; (GAMEOBJECT.IsValid)" />
			<PursueUnit Id="90134" Priority="2" PursueWhen="!IsObjectiveComplete(2, 42119) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)" />
		</PursuitList>
	</CustomBehavior>
	<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
</While>
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
	<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
						</QuestOrder>
					</HBProfile>