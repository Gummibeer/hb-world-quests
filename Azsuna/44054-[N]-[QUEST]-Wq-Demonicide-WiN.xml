<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[44054] Demonicide - WiN</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i <= NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestUtils_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<!--
<PickUp Nav="Fly" QuestName="Demonicide" QuestId="44054" GiverName="" GiverId="" />
<Objective QuestName="Demonicide" QuestId="44054" Type="KillMob" Nav="Fly" MobId="112446" KillCount="100" />
<Objective QuestName="Demonicide" QuestId="44054" Type="KillMob" Nav="Fly" MobId="112447" KillCount="34" />
<Objective QuestName="Demonicide" QuestId="44054" Type="KillMob" Nav="Fly" MobId="112448" KillCount="20" />
<Objective QuestName="Demonicide" QuestId="44054" Type="KillMob" Nav="Fly" MobId="112449" KillCount="100" />
<Objective QuestName="Demonicide" QuestId="44054" Type="KillMob" Nav="Fly" MobId="112450" KillCount="10" />
<TurnIn Nav="Fly" QuestName="Demonicide" QuestId="44054" TurnInName="" TurnInId="" />

<WoWUnit Name="Brimstone Destroyer" Entry="111889" X="-1863.249" Y="6520.645" Z="163.1418" />
<WoWUnit Name="Burning Fiend" Entry="111766" X="-1927.974" Y="6606.984" Z="131.343" />
<WoWUnit Name="Shadowflame Fiend" Entry="111767" X="-1928.749" Y="6601.854" Z="132.1839" />
<WoWUnit Name="Malignant Stalker" Entry="111751" X="-1934.753" Y="6602.798" Z="131.2434" />
<WoWUnit Name="Guardian Hippogryph" Entry="111898" X="-1964.257" Y="6666.401" Z="132.7964" />

<WoWUnit Name="Felfire Fiend" Entry="111768" X="-1436.645" Y="6822.453" Z="27.57947" />
<WoWUnit Name="Experimental Fel Corruptor" Entry="111763" X="-1440.957" Y="6809.209" Z="25.52348" />
<WoWUnit Name="Burning Fiend" Entry="111766" X="-1422.589" Y="6764.6" Z="14.14706" />
<WoWUnit Name="Malignant Stalker" Entry="111751" X="-1434.973" Y="6875.353" Z="25.55453" />
<WoWUnit Name="Beguiled Inquisitor" Entry="111752" X="-1439.176" Y="6884.338" Z="25.81532" />

-->
<While Condition="WorldQuestInfo.HasWorldQuest(44054)" >
	<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;Loading Profile [44054] Demonicide - WiN!&quot;);" />
	<RunTo X="-1433.905" Y="6814.768" Z="26.65341" />
	

	
	<CustomBehavior File="InteractWith" NumOfTimes="50" TerminateWhen="!WorldQuestInfo.HasWorldQuest(44054)" >
		<HuntingGrounds>
<Hotspot  X="-1433.905" Y="6814.768" Z="26.65341" />
<Hotspot X="-1424.14" Y="6912.86" Z="26.92653" />
<Hotspot X="-1402.932" Y="6976.872" Z="35.71423" />
		</HuntingGrounds>
		<PursuitList>

      <PursueUnit Id="111768" PursueWhen="!IsObjectiveComplete(1,44054) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="111763" PursueWhen="!IsObjectiveComplete(1,44054) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="111766" PursueWhen="!IsObjectiveComplete(1,44054) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="111751" PursueWhen="!IsObjectiveComplete(1,44054) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="111752" PursueWhen="!IsObjectiveComplete(1,44054) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>

		</PursuitList>
	</CustomBehavior>
	<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
</While>
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
	<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest [44054] Demonicide - WiN!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
						</QuestOrder>
					</HBProfile>