<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>Rally the Nightwatchers</Name>

	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>

	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>

	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>

	<TargetElites>true</TargetElites>

	<AvoidMobs>
		<Mob Name="Murkwater Behemoth" Entry="102204" />
	</AvoidMobs>

	<QuestOrder>
	<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			

    public class WorldQuestData
    {
        public int ID;
        public string Name;
        public DateTime ExpireTime;
    }


    public static class WorldQuestInfo
    {
        static List<WorldQuestData> _cache = new List<WorldQuestData>();
        static internal bool _dirty = true;
        static internal bool _setup = false;

        static WorldQuestInfo()
        {
            Setup();
        }

        public static void Setup()
        {
            if (_setup)
                return;

            Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);

            UpdateWorldQuests();
            _setup = true;
        }

        public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
        {
            _dirty = true;
        }

        public static bool HasWorldQuest(int questid)
        {
            UpdateWorldQuests();

            var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();

            if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
                return false;
            return true;
        }

        public static void UpdateWorldQuests()
        {
            if (!_dirty)
                return;
            _cache = new List<WorldQuestData>();
            
            var player = StyxWoW.Me;
            int BrokenIslesMapArea = 1007;

            var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
            
            var NumZones = int.Parse(ret[0]);

            for (int i = 1; i <= NumZones; ++i)
            {
                ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));

                var ZoneID = int.Parse(ret[0]);
                var ZoneName = ret[1];
                var ZoneDepth = int.Parse(ret[2]);

                if (ZoneDepth > 1) //Do not look at subzones
                {
                    Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
                    continue;
                }

                string ToRun = string.Format(@"     local questids = {{}};

                    			                    local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});

                                                    if taskInfo then
				                                                    for i, info in ipairs(taskInfo) do
					                                                    if HaveQuestData(info.questId) then
						                                                    if QuestMapFrame_IsQuestWorldQuest(info.questId) then
                                                                                    table.insert(questids, info.questId);
							                                                    end
						                                                    end
					                                                    end
				                                                    end
                                                   return unpack(questids);
                                                ", ZoneID, BrokenIslesMapArea);

                ret = Lua.GetReturnValues(ToRun);

                foreach (var q in ret)
                {
                    int questid = int.Parse(q);

                    //TimeLeft is in minutes
                    var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
                    var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));

                    Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);

                    var data = new WorldQuestData();
                    data.ID = questid;
                    data.Name = QuestInfo[0];
                    data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
                    _cache.Add(data);
                }
            }

            _dirty = false;
        }

        public static bool IsWorldQuest(int questid)
        {
            string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);

            var ret = Lua.GetReturnValues(lua);

            if (ret[3] == null)
                return false;
            return true;
        }
    }


				]]>
			</CustomBehavior>
	<!-- 

<PickUp Nav="Fly" QuestName="Rally the Nightwatchers" QuestId="42108" GiverName="" GiverId="" />
<Objective QuestName="Rally the Nightwatchers" QuestId="42108" Type="KillMob" Nav="Fly" MobId="89650" KillCount="1" />
<Objective QuestName="Rally the Nightwatchers" QuestId="42108" Type="KillMob" Nav="Fly" MobId="88090" KillCount="1" />
<Objective QuestName="Rally the Nightwatchers" QuestId="42108" Type="KillMob" Nav="Fly" MobId="106273" KillCount="10" />
<TurnIn Nav="Fly" QuestName="Rally the Nightwatchers" QuestId="42108" TurnInName="" TurnInId="" />
<WoWUnit Name="Valiyaka the Stormbringer" Entry="89650" X="301.5492" Y="6720.498" Z="90.01509" />
<WoWUnit Name="Fathom-Commander Zarrin" Entry="88090" X="185.0083" Y="6866.218" Z="71.82647" />
	-->
		<While Condition="WorldQuestInfo.HasWorldQuest(42108)" >
			<RunTo X="40.61609" Y="6746.641" Z="50.38974" />
			<CustomBehavior File="Hooks\DoWhen" ActivityName="ReturningZombies" AllowUseDuringCombat="true" AllowUseInVehicle="true" AllowUseWhileMounted="true" StopMovingToConductActivity="true" LogExecution="false" UseAtInterval="5000" >
				<CustomBehavior File="RunCode"><![CDATA[
					Lua.DoString("ExtraActionButton1:Click();");
				]]>
				</CustomBehavior>
			</CustomBehavior>
			<CustomBehavior File="InteractWith" NumOfTimes="100" TerminateWhen="IsObjectiveComplete(3,42108)" NonCompeteDistance="0" >
				<HuntingGrounds>
					<Hotspot X="48.20398" Y="6747.784" Z="50.63407" />
					<Hotspot X="131.7066" Y="6764.75" Z="48.52868" />
					<Hotspot X="130.2867" Y="6713.201" Z="48.8745" />
					<Hotspot X="244.9937" Y="6729.303" Z="53.82741" />
				</HuntingGrounds>
				<PursuitList>
					<PursueObject Id="88782" PursueWhen="!IsObjectiveComplete(3,42108)"/>
				</PursuitList>
			</CustomBehavior>
			
			<CustomBehavior File="Hooks\DoWhen" ActivityName="ReturningZombies" Command="Remove" />
			
			<CustomBehavior File="KillUntilComplete" TerminateWhen="IsObjectiveComplete(1,42108)">
				<HuntingGrounds>
					<Hotspot X="300.1334" Y="6711.056" Z="90.01488" />
				</HuntingGrounds>
				<PursuitList>
					<PursueUnit Id="89650" PursueWhen="!IsObjectiveComplete(1,42108) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
				</PursuitList>
			</CustomBehavior>
			<CustomBehavior File="KillUntilComplete" TerminateWhen="IsObjectiveComplete(2,42108)">
				<HuntingGrounds>
					<Hotspot X="185.0083" Y="6866.218" Z="71.82647" />
				</HuntingGrounds>
				<PursuitList>
					<PursueUnit Id="88090" PursueWhen="!IsObjectiveComplete(2,42108) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
				</PursuitList>
			</CustomBehavior>
			<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
			<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
		</While>
	
	<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" ><CustomBehavior  File="UseItem" ItemId="141605" WaitTime="2000" /></If>
	

<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
</QuestOrder>
</HBProfile>