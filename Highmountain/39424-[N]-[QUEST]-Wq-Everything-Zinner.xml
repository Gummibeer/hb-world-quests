<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[39424] Everything WorldQuest Zinner</Name>

	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>

	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>

	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>

	<TargetElites>true</TargetElites>

	

	<QuestOrder>
	<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			

    public class WorldQuestData
    {
        public int ID;
        public string Name;
        public DateTime ExpireTime;
    }


    public static class WorldQuestInfo
    {
        static List<WorldQuestData> _cache = new List<WorldQuestData>();
        static internal bool _dirty = true;
        static internal bool _setup = false;

        static WorldQuestInfo()
        {
            Setup();
        }

        public static void Setup()
        {
            if (_setup)
                return;

            Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);

            UpdateWorldQuests();
            _setup = true;
        }

        public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
        {
            _dirty = true;
        }

        public static bool HasWorldQuest(int questid)
        {
            UpdateWorldQuests();

            var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();

            if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
                return false;
            return true;
        }

        public static void UpdateWorldQuests()
        {
            if (!_dirty)
                return;
            _cache = new List<WorldQuestData>();
            
            var player = StyxWoW.Me;
            int BrokenIslesMapArea = 1007;

            var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
            
            var NumZones = int.Parse(ret[0]);

            for (int i = 1; i <= NumZones; ++i)
            {
                ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));

                var ZoneID = int.Parse(ret[0]);
                var ZoneName = ret[1];
                var ZoneDepth = int.Parse(ret[2]);

                if (ZoneDepth > 1) //Do not look at subzones
                {
                    Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
                    continue;
                }

                string ToRun = string.Format(@"     local questids = {{}};

                    			                    local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});

                                                    if taskInfo then
				                                                    for i, info in ipairs(taskInfo) do
					                                                    if HaveQuestData(info.questId) then
						                                                    if QuestUtils_IsQuestWorldQuest(info.questId) then
                                                                                    table.insert(questids, info.questId);
							                                                    end
						                                                    end
					                                                    end
				                                                    end
                                                   return unpack(questids);
                                                ", ZoneID, BrokenIslesMapArea);

                ret = Lua.GetReturnValues(ToRun);

                foreach (var q in ret)
                {
                    int questid = int.Parse(q);

                    //TimeLeft is in minutes
                    var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
                    var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));

                    Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);

                    var data = new WorldQuestData();
                    data.ID = questid;
                    data.Name = QuestInfo[0];
                    data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
                    _cache.Add(data);
                }
            }

            _dirty = false;
        }

        public static bool IsWorldQuest(int questid)
        {
            string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);

            var ret = Lua.GetReturnValues(lua);

            if (ret[3] == null)
                return false;
            return true;
        }
    }


				]]>
			</CustomBehavior>
	
<!--
<PickUp Nav="Fly" QuestName="Everything!" QuestId="39424" GiverName="" GiverId="" />
<Objective QuestName="Everything!" QuestId="39424" Type="KillMob" Nav="Fly" MobId="95290" KillCount="13" />
<Objective QuestName="Everything!" QuestId="39424" Type="UseObject" Nav="Fly" ObjectId="243539" UseCount="17" />
<Objective QuestName="Everything!" QuestId="39424" Type="KillMob" Nav="Fly" MobId="96361" KillCount="13" />
<Objective QuestName="Everything!" QuestId="39424" Type="UseObject" Nav="Fly" ObjectId="245158" UseCount="13" />
<Objective QuestName="Everything!" QuestId="39424" Type="KillMob" Nav="Fly" MobId="96621" KillCount="1" />
<TurnIn Nav="Fly" QuestName="Everything!" QuestId="39424" TurnInName="" TurnInId="" />

<WoWUnit Name="Feltotem Warmonger" Entry="95290" X="5694.326" Y="4241.63" Z="694.903" />
<WoWUnit Name="Feltotem Bonehound" Entry="104323" X="5703.954" Y="4223.96" Z="694.9478" />
<WoWUnit Name="Mellok, Son of Torok" Entry="96621" X="5708.78" Y="4218.239" Z="696.2471" />

<Vendor Name="Mellok, Son of Torok" Entry="96621" Type="Repair" Nav="Fly" X="5689.597" Y="4243.982" Z="694.9059" />
-->		

		<While Condition="WorldQuestInfo.HasWorldQuest(39424)" >
			<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;Loading Profile [39424] Everything!!&quot;);" />
			
<!-- <Vendor Name="Mellok, Son of Torok" Entry="96621" Type="Repair" Nav="Fly" X="5689.597" Y="4243.982" Z="694.9059" /> -->			
			<MoveTo NAV="Fly" X="5689.597" Y="4243.982" Z="694.9059" />

<CustomBehavior File="KillUntilComplete"  QuestId="39424"  TerminateWhen="!WorldQuestInfo.HasWorldQuest(39424)">
	<HuntingGrounds>
<Hotspot X="5689.597" Y="4243.982" Z="694.9059" />
				<Hotspot X="5415.637" Y="4624.962" Z="629.0225" />
				<Hotspot X="5540.945" Y="4601.291" Z="652.3784" />
				<Hotspot X="5516.102" Y="4409.124" Z="667.5075" />
				<Hotspot X="5637.723" Y="4406.024" Z="663.3016" />
				<Hotspot X="5670.277" Y="4268.888" Z="694.905" />	
				<Hotspot X="5608.665" Y="4300.148" Z="674.5359" />
				<Hotspot X="5660.159" Y="4250.666" Z="694.9047" />
	</HuntingGrounds>
	<PursuitList>
		<PursueUnit Id="95290" Priority="1" PursueWhen="!IsObjectiveComplete(1, 39424) &amp;&amp; (UNIT.IsAlive)" />
		<PursueUnit Id="104323" Priority="1" PursueWhen="!IsObjectiveComplete(1, 39424) &amp;&amp; (UNIT.IsAlive)" />
		<PursueUnit Id="96621" Priority="1" PursueWhen="!IsObjectiveComplete(2, 39424) &amp;&amp; (UNIT.IsAlive)" />
	</PursuitList>
</CustomBehavior>
			
			
							<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
		</While>

	
	
	
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
    <CustomBehavior    File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
	
<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest [39424] Everything!!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
</QuestOrder>
</HBProfile>