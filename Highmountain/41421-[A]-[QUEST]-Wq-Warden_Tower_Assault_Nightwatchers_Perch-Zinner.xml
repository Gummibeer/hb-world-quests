<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[41421] Warden Tower Assault: Nightwatcher's Perch</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>false</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i <= NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestMapFrame_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<!--
<PickUp Nav="Fly" QuestName="Warden Tower Assault: Cordana's Apex" QuestId="41227" GiverName="" GiverId="" />
<Objective QuestName="Warden Tower Assault: Cordana's Apex" QuestId="41227" Type="KillMob" Nav="Fly" MobId="103650" KillCount="13" />
<Objective QuestName="Warden Tower Assault: Cordana's Apex" QuestId="41227" Type="KillMob" Nav="Fly" MobId="103652" KillCount="1" />
<TurnIn Nav="Fly" QuestName="Warden Tower Assault: Cordana's Apex" QuestId="41227" TurnInName="" TurnInId="" />

<WoWUnit Name="Forsaken Frostflinger" Entry="103446" X="4290.136" Y="5833.43" Z="400.2081" />
<WoWUnit Name="Forsaken Archer" Entry="103729" X="4337.28" Y="5811.724" Z="398.9065" />
<WoWUnit Name="Forsaken Defender" Entry="103210" X="4340.43" Y="5887.108" Z="398.6067" />
<WoWUnit Name="Forsaken Dark Ranger" Entry="103745" X="4245.93" Y="5884.34" Z="410.0181" />
<WoWUnit Name="Forsaken Rector" Entry="103453" X="4317.455" Y="5917.848" Z="419.2583" />
<WoWUnit Name="Forsaken Befouler" Entry="103245" X="4243.6" Y="5921.956" Z="414.2474" />
<WoWUnit Name="Festering Abomination" Entry="103430" X="4299.979" Y="5918.348" Z="420.0585" />
<WoWUnit Name="Forsaken Deceiver" Entry="103218" X="4235.549" Y="5940.538" Z="417.7929" />
<WoWUnit Name="Forsaken Plaguebringer" Entry="103307" X="4283.208" Y="5960.13" Z="508.6395" />

<Vendor Name="Dark Ranger Alina" Entry="104289" Type="Repair" Nav="Fly" X="4308.232" Y="5966.305" Z="508.6072" />
<Vendor Name="Captain Grimshanks" Entry="104290" Type="Repair" Nav="Fly" X="4306.199" Y="5977.233" Z="508.6058" />
<Vendor Name="Magus Bonechill" Entry="103757" Type="Repair" Nav="Fly" X="4295.708" Y="5980.292" Z="508.6548" />
-->

<While Condition="WorldQuestInfo.HasWorldQuest(41421)" >
	<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;Loading Profile [41421] Warden Tower Assault: Nightwatcher's Perch!&quot;);" />
	<RunTo X="4289.254" Y="5948.115" Z="419.774" />
	<CustomBehavior File="InteractWith" NumOfTimes="50" TerminateWhen="IsQuestCompleted(41421)" >
		<HuntingGrounds>
<!-- front of tower -->
			<Hotspot X="4289.254" Y="5948.115" Z="419.774" />
<!-- top of tower stairs-->
<Hotspot X="4275.012" Y="5948.973" Z="508.4942" />
<!-- tower balcony-->
<Hotspot X="2082.174" Y="7546.392" Z="92.03181" />
<!-- wider front of tower to find any last mobs to hit 100% -->
<Hotspot X="4265.131" Y="5887.973" Z="413.2054" />
<!-- outside - we shouldnt really need these if we run up/down the tower enough 
<Hotspot X="4329.707" Y="5727.556" Z="432.7065" />
<Hotspot X="4380.838" Y="5736.195" Z="419.7085" />
<Hotspot X="4423.6" Y="5819.86" Z="398.8525" />
<Hotspot X="4282.579" Y="5856.775" Z="403.4716" />
<Hotspot X="4236.574" Y="5937.074" Z="417.463" />
<Hotspot X="4200.645" Y="5940.013" Z="411.6289" />
<Hotspot X="4193.287" Y="5940.76" Z="412.8269" />
<Hotspot X="4298.676" Y="5903.26" Z="418.4761" /> -->

		</HuntingGrounds>
		<PursuitList>
      <PursueUnit Id="103446" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103729" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103210" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103745" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103453" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103245" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103651" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103768" PursueWhen="!IsObjectiveComplete(1,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103430" PursueWhen="!IsObjectiveComplete(1,42276) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103218" PursueWhen="!IsObjectiveComplete(1,42276) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103307" PursueWhen="!IsObjectiveComplete(1,42276) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
<!-- Captains Rotate -->
      <PursueUnit Id="104289" Priority="100" PursueWhen="!IsObjectiveComplete(2,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="104290" Priority="100" PursueWhen="!IsObjectiveComplete(2,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
      <PursueUnit Id="103757" Priority="100" PursueWhen="!IsObjectiveComplete(2,41421) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
	 </PursuitList>
	</CustomBehavior>
	<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
</While>
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
	<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest [41421] Warden Tower Assault: Nightwatcher's Perch!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
						</QuestOrder>
					</HBProfile>