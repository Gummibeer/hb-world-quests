<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[41095] Critical Crops - WiN</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i <= NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestMapFrame_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<!--
<PickUp Nav="Fly" QuestName="Critical Crops" QuestId="41095" GiverName="" GiverId="" />
<Objective QuestName="Critical Crops" QuestId="41095" Type="KillMob" Nav="Fly" MobId="102889" KillCount="5" />
<Objective QuestName="Critical Crops" QuestId="41095" Type="KillMob" Nav="Fly" MobId="94691" KillCount="3" />
<Objective QuestName="Critical Crops" QuestId="41095" Type="KillMob" Nav="Fly" MobId="94688" KillCount="10" />
<TurnIn Nav="Fly" QuestName="Critical Crops" QuestId="41095" TurnInName="" TurnInId="" />
<WoWUnit Name="Tangled Gourd" Entry="102890" X="4209.531" Y="4637.221" Z="653.3498" />
<WoWUnit Name="Tangled Maize" Entry="102887" X="4211.019" Y="4614.492" Z="655.2205" />
<WoWUnit Name="Wiggling Maize" Entry="102884" X="4194.465" Y="4643.11" Z="652.5309" />
<WoWUnit Name="Jumping Maize" Entry="102917" X="4200.329" Y="4651.038" Z="652.2956" />
<WoWUnit Name="Jumping Gourd" Entry="102892" X="4215.109" Y="4611.205" Z="655.0027" />
<WoWUnit Name="Wiggling Gourd" Entry="102882" X="4205.129" Y="4611.024" Z="655.4719" />
-->
<While Condition="WorldQuestInfo.HasWorldQuest(41095)" >
	<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;Loading Profile [41095] Critical Crops - WiN!&quot;);" />
	<RunTo X="4218.46" Y="4614.171" Z="654.2935"/>
	<CustomBehavior File="InteractWith" NumOfTimes="30" TerminateWhen="!WorldQuestInfo.HasWorldQuest(41095)" >
		<HuntingGrounds>
			<Hotspot X="4218.46" Y="4614.171" Z="654.2935" />
			<Hotspot X="4199.074" Y="4647.532" Z="652.4563" />
			<Hotspot X="4175.78" Y="4641.748" Z="652.0929" />
			<Hotspot X="4161.222" Y="4633.249" Z="652.8776" />
		</HuntingGrounds>
		<PursuitList>
			<PursueUnit Id="102890" Priority="100" PursueWhen="!IsObjectiveComplete(1,41095)" />
			<PursueUnit Id="102887" Priority="100" PursueWhen="!IsObjectiveComplete(1,41095)" />
			<PursueUnit Id="102884" Priority="100" PursueWhen="!IsObjectiveComplete(1,41095)" />
			<PursueUnit Id="102917" Priority="100" PursueWhen="!IsObjectiveComplete(1,41095)" />
			<PursueUnit Id="102892" Priority="100" PursueWhen="!IsObjectiveComplete(1,41095)" />
			<PursueUnit Id="102882" Priority="100" PursueWhen="!IsObjectiveComplete(1,41095)" />
			<PursueUnit Id="94688" PursueWhen="!IsObjectiveComplete(3,41095) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
			<PursueUnit Id="94691" PursueWhen="!IsObjectiveComplete(2,41095) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
		</PursuitList>
	</CustomBehavior>
	<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
</While>
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
	<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest [41095] Critical Crops - WiN!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
						</QuestOrder>
					</HBProfile>