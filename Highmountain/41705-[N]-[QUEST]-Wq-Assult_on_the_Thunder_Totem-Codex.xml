<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[N-Quest] Assult on the Thunder Totem - Codex</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i <= NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestMapFrame_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<While Condition="WorldQuestInfo.HasWorldQuest(41705)" >
	<!-- Get in range of quest to activate -->
	<RunTo X="4156.51" Y="4374.45" Z="768.16" />
<PickUp Nav="Fly" QuestName="Assault on Thunder Totem" QuestId="41705" GiverName="" GiverId="" />
<Objective QuestName="Assault on Thunder Totem" QuestId="41705" Type="KillMob" Nav="Fly" MobId="104614" KillCount="7" />
<Objective QuestName="Assault on Thunder Totem" QuestId="41705" Type="KillMob" Nav="Fly" MobId="104615" KillCount="13" />
<Objective QuestName="Assault on Thunder Totem" QuestId="41705" Type="KillMob" Nav="Fly" MobId="104624" KillCount="8" />
<Objective QuestName="Assault on Thunder Totem" QuestId="41705" Type="KillMob" Nav="Fly" MobId="104660" KillCount="4" />
<TurnIn Nav="Fly" QuestName="Assault on Thunder Totem" QuestId="41705" TurnInName="" TurnInId="" />
</While>


<!--
<Vendor Name="Harbinger of Nightmare" Entry="105826" Type="Repair" Nav="Fly" X="2623.418" Y="6398.783" Z="181.6399" />

-->
<While Condition="WorldQuestInfo.HasWorldQuest(41705)" >
	<RunTo X="4156.51" Y="4374.45" Z="768.16" />
	
	
		<CustomBehavior File="InteractWith" NumOfTimes="30" TerminateWhen="IsQuestCompleted(41705)" >
		<HuntingGrounds>
			<Hotspot X="4119.094" Y="4420.768" Z="768.4896" />
			<Hotspot X="4035.277" Y="4415.141" Z="768.3971" />
			<Hotspot X="4047.046" Y="4309.303" Z="768.4736" />
			<!-- return to start -->
		<Hotspot X="4156.51" Y="4374.45" Z="768.16" />
		</HuntingGrounds>
		<PursuitList>
			<PursueUnit Id="104614" Priority="100" PursueWhen="!IsObjectiveComplete(1,41705)" />
			<PursueUnit Id="104615" Priority="100" PursueWhen="!IsObjectiveComplete(1,41705)" />
			<PursueUnit Id="104624" Priority="100" PursueWhen="!IsObjectiveComplete(1,41705)" />
			<PursueUnit Id="104660" Priority="100" PursueWhen="!IsObjectiveComplete(1,41705)" />
		</PursuitList>
	</CustomBehavior>
	<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
	
	

</While>
<!--
doesnt need the whistle it is rightbeside the flight point
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
    <CustomBehavior    File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
-->	
<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest [N]-[QUEST]-Wq-Reclaiming_Llothien-Zinner, loading auto-loader!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
</QuestOrder>
</HBProfile>