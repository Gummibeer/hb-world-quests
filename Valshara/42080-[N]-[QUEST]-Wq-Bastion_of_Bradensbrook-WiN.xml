<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[42080] Bastion of Bradensbrook - WiN</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i <= NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestMapFrame_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<!--
<PickUp Nav="Fly" QuestName="Bastion of Bradensbrook" QuestId="42080" GiverName="" GiverId="" />
<Objective QuestName="Bastion of Bradensbrook" QuestId="42080" Type="KillMob" Nav="Fly" MobId="93999" KillCount="6" />
<Objective QuestName="Bastion of Bradensbrook" QuestId="42080" Type="KillMob" Nav="Fly" MobId="93966" KillCount="8" />
<Objective QuestName="Bastion of Bradensbrook" QuestId="42080" Type="KillMob" Nav="Fly" MobId="106012" KillCount="4" />
<TurnIn Nav="Fly" QuestName="Bastion of Bradensbrook" QuestId="42080" TurnInName="" TurnInId="" />


<WoWUnit Name="Bradensbrook Ewe" Entry="92422" X="2780.052" Y="7327.481" Z="21.05146" /> - Not interactable
<WoWUnit Name="Bradensbrook Ewe" Entry="106009" X="2736.114" Y="7366.158" Z="12.38859" /> - Interactable

<WoWUnit Name="Bradensbrook Ewe" Entry="106012" X="2592.778" Y="7430.817" Z="12.68927" /> - on leash


<WoWUnit Name="Risen Assassin" Entry="94046" X="2811.686" Y="7346.747" Z="18.94308" />
<WoWUnit Name="Risen Hound" Entry="91847" X="2751.564" Y="7331.456" Z="19.04094" />
<WoWUnit Name="Black Rook Falcon" Entry="93064" X="2720.645" Y="7394.512" Z="21.37632" /> - need to use the custom button on these
Return Sheep here
<Hotspot X="2787.141" Y="7322.856" Z="21.31259" />

-->
<While Condition="WorldQuestInfo.HasWorldQuest(42080)" >
	<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;Loading Profile [42080] Bastion of Bradensbrook - WiN!&quot;);" />
	<RunTo X="2756.934" Y="7339.524" Z="17.81155" />
	
		<CustomBehavior File="Hooks\DoWhen" ActivityName="ReturningZombies" AllowUseDuringCombat="true" AllowUseInVehicle="true" AllowUseWhileMounted="true" StopMovingToConductActivity="true" LogExecution="false" UseAtInterval="5000">
				<CustomBehavior File="RunCode"><![CDATA[
					Lua.DoString("ExtraActionButton1:Click();");
				]]>
				</CustomBehavior>
			</CustomBehavior>
			
			
			<CustomBehavior File="InteractWith" NumOfTimes="6" MobState="Dead" TerminateWhen="IsObjectiveComplete(1,42080)" NonCompeteDistance="0" Range="49">
				<HuntingGrounds>
<Hotspot X="2756.934" Y="7339.524" Z="17.81155" />
<Hotspot X="2769.821" Y="7441.142" Z="5.402129" />
<Hotspot X="2628.272" Y="7423.303" Z="12.35735" />
<Hotspot X="2654.722" Y="7355.347" Z="21.90495" />
<Hotspot X="2716.236" Y="7282.828" Z="14.57363" />
				</HuntingGrounds>
				<PursuitList>
					<PursueUnit Id="93064" PursueWhen="!IsObjectiveComplete(1,42080) &amp;&amp; (UNIT.IsAlive) &amp;&amp; !UNIT.TaggedByOther"/>
				</PursuitList>
			</CustomBehavior>
			
			<CustomBehavior File="Hooks\DoWhen" ActivityName="ReturningZombies" Command="Remove" />
<!-- ewe ids change once Tagged
<WoWUnit Name="Bradensbrook Ewe" Entry="106009" X="2736.114" Y="7366.158" Z="12.38859" /> - Interactable
<WoWUnit Name="Bradensbrook Ewe" Entry="106012" X="2592.778" Y="7430.817" Z="12.68927" /> - on leash
TerminateWhen="Unit(90403, u =&gt; u.Distance &lt;= 5) != null"

	-->
	<CustomBehavior File="InteractWith" NumOfTimes="4"  TerminateWhen="IsObjectiveComplete(3,42080)" NonCompeteDistance="0"  >
		<HuntingGrounds>
<Hotspot X="2756.934" Y="7339.524" Z="17.81155" />
<Hotspot X="2769.821" Y="7441.142" Z="5.402129" />
<Hotspot X="2628.272" Y="7423.303" Z="12.35735" />
<Hotspot X="2654.722" Y="7355.347" Z="21.90495" />
<Hotspot X="2716.236" Y="7282.828" Z="14.57363" />

		</HuntingGrounds>
		<PursuitList>
<!--			<PursueGameObject Id="249703" Priority="100" PursueWhen="!IsObjectiveComplete(2,42080)" /> -->
<!--      <PursueUnit Id="93064" PursueWhen="!IsObjectiveComplete(1,42080) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/> -->

			<PursueUnit Id="106009" PursueWhen="!IsObjectiveComplete(3,42080) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>

		</PursuitList>
		<RunTo X="2786.168" Y="7321.965" Z="21.65909" />
	</CustomBehavior>
	
	

<CustomBehavior File="WaitTimer" WaitTime="2000" />	
		<CustomBehavior File="InteractWith" NumOfTimes="10" TerminateWhen="!WorldQuestInfo.HasWorldQuest(42080)" >
		<HuntingGrounds>
<Hotspot X="2756.934" Y="7339.524" Z="17.81155" />
<Hotspot X="2769.821" Y="7441.142" Z="5.402129" />
<Hotspot X="2628.272" Y="7423.303" Z="12.35735" />
<Hotspot X="2654.722" Y="7355.347" Z="21.90495" />
<Hotspot X="2716.236" Y="7282.828" Z="14.57363" />
<Hotspot X="2781.773" Y="7327.492" Z="21.05878" />
		</HuntingGrounds>
		<PursuitList>
<!--			<PursueGameObject Id="249703" Priority="100" PursueWhen="!IsObjectiveComplete(2,42080)" /> -->
<!--      <PursueUnit Id="93064" PursueWhen="!IsObjectiveComplete(1,42080) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/> -->
			<PursueUnit Id="91847" PursueWhen="!IsObjectiveComplete(2,42080) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>
			<PursueUnit Id="94046" PursueWhen="!IsObjectiveComplete(2,42080) &amp;&amp; (UNIT.IsAlive || UNIT.Lootable)"/>

		</PursuitList>
	</CustomBehavior>
	
	<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
</While>
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
	<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest [42080] Bastion of Bradensbrook - WiN!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
						</QuestOrder>
					</HBProfile>