<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[N-Quest] Crawliac's Legacy - Win</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i < NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestMapFrame_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<While Condition="WorldQuestInfo.HasWorldQuest(41622)" >
	<!-- Get in range of quest to activate -->
	<RunTo X="4935.367" Y="4059.457" Z="810.958" />

<PickUp Nav="Fly" QuestName="Crawliac's Legacy" QuestId="41622" GiverName="" GiverId="" />
<Objective QuestName="Crawliac's Legacy" QuestId="41622" Type="KillMob" Nav="Fly" MobId="94983" KillCount="8" />
<Objective QuestName="Crawliac's Legacy" QuestId="41622" Type="KillMob" Nav="Fly" MobId="94986" KillCount="3" />
<Objective QuestName="Crawliac's Legacy" QuestId="41622" Type="KillMob" Nav="Fly" MobId="104531" KillCount="3" />
<TurnIn Nav="Fly" QuestName="Crawliac's Legacy" QuestId="41622" TurnInName="" TurnInId="" />
</While>


<!--
<Vendor Name="Crawliac Skywitch" Entry="94983" Type="Repair" Nav="Fly" X="4950.179" Y="4109.878" Z="819.1556" />
<Vendor Name="Crawliac Doomwailer" Entry="94984" Type="Repair" Nav="Fly" X="5080.569" Y="4152.14" Z="815.6488" />
<Vendor Name="Fleshrender Roc" Entry="94986" Type="Repair" Nav="Fly" X="4947.095" Y="4093.91" Z="817.7751" />
<WoWUnit Name="Hexxing Fetish" Entry="104531" X="5003.188" Y="3980.384" Z="794.5077" />

-->
<While Condition="WorldQuestInfo.HasWorldQuest(41622)" >
	<RunTo X="4935.367" Y="4059.457" Z="810.958" />
	<CustomBehavior File="InteractWith" MobIds="104531" NumOfTimes="3" QuestId="41622" QuestObjectiveIndex="3" TerminateWhen="IsObjectiveComplete(3, 41622)">
		<RunTo X="4935.367" Y="4059.457" Z="810.958" />
		<HuntingGrounds>
			<Hotspot X="4975.211" Y="4032.384" Z="793.4526" />
			<Hotspot X="4982.735" Y="4050.472" Z="795.8301" />
			<Hotspot X="4995.577" Y="4061.534" Z="794.6678" />
			<Hotspot X="5037.543" Y="4073.083" Z="793.3027" />
			<Hotspot X="5072.734" Y="4081.304" Z="792.8069" />
			<Hotspot X="5119.052" Y="4051.121" Z="794.8028" />
<Hotspot X="5083.27" Y="3976.329" Z="810.4144" />
		</HuntingGrounds>
	</CustomBehavior>
	<CustomBehavior File="KillUntilComplete" MobIds="94986" QuestId="41622" TerminateWhen="IsObjectiveComplete(2, 41622)">
		<HuntingGrounds>
			<Hotspot X="4975.211" Y="4032.384" Z="793.4526" />
			<Hotspot X="4982.735" Y="4050.472" Z="795.8301" />
			<Hotspot X="4995.577" Y="4061.534" Z="794.6678" />
			<Hotspot X="5037.543" Y="4073.083" Z="793.3027" />
			<Hotspot X="5072.734" Y="4081.304" Z="792.8069" />
			<Hotspot X="5119.052" Y="4051.121" Z="794.8028" />
<Hotspot X="5083.27" Y="3976.329" Z="810.4144" />
		</HuntingGrounds>
	</CustomBehavior>
	<CustomBehavior File="KillUntilComplete" MobIds="94983, 94984" QuestId="41622" TerminateWhen="IsObjectiveComplete(1, 41622)">
		<HuntingGrounds>
<Hotspot X="4967.02" Y="4195.427" Z="830.2675" />
<Hotspot X="4999.645" Y="4149.365" Z="817.8188" />
<Hotspot X="5036.618" Y="4169.89" Z="819.3353" />

		</HuntingGrounds>
	</CustomBehavior>
<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />
</While>
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
	<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
</If>
						</QuestOrder>
					</HBProfile>