<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[43951] An Overdue Debt - Win</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i <= NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestUtils_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>


<!--
<PickUp Nav="Fly" QuestName="An Overdue Debt" QuestId="43951" GiverName="" GiverId="" />
<Objective QuestName="An Overdue Debt" QuestId="43951" Type="KillMob" Nav="Fly" MobId="104365" KillCount="6" />
<TurnIn Nav="Fly" QuestName="An Overdue Debt" QuestId="43951" TurnInName="" TurnInId="" />

<GameObject Name="Prisoner Cage" Entry="247985" X="2408.172" Y="2382.78" Z="257.3202" />


<WoWUnit Name="Grapple Point" Entry="91983" X="2668.16" Y="2545.319" Z="238.6316" />
<WoWUnit Name="Scout Grapple Point" Entry="108403" X="2668.163" Y="2545.227" Z="238.6316" />


Not these
<WoWUnit Name="Grapple Point" Entry="91983" X="2668.16" Y="2545.319" Z="238.6316" />
<WoWUnit Name="Grapple Point" Entry="92072" X="2636.41" Y="2629.834" Z="255.0765" />

-->
<While Condition="WorldQuestInfo.HasWorldQuest(43951)" >
	<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;Loading Profile [43951] An Overdue Debt - WiN!&quot;);" />
<!--
	<RunTo X="2613.978" Y="2791.789" Z="286.757" />
	<CustomBehavior File="WaitTimer" WaitTime="2000" />
<RunTo 	X="2577.124" Y="2771.69" Z="289.629" />
<CustomBehavior File="WaitTimer" WaitTime="5000" />
<CustomBehavior File="InteractWith" MobId="92017" X="2568.798" Y="2727.911" Z="314.9524" />
<CustomBehavior File="WaitTimer" WaitTime="8000" />
<RunTo X="2519.499" Y="2700.098" Z="291.1216" />


<Hotspot X="2668.596" Y="2545.278" Z="238.6316" />
<WoWUnit Name="Grapple Point" Entry="91983" X="2668.16" Y="2545.319" Z="238.6316" />
-->
<RunTo X="2635.865" Y="2694.04" Z="255.758" />
<CustomBehavior File="WaitTimer" WaitTime="5000" />

<CustomBehavior File="InteractWith" MobId="92072" X="2636.41" Y="2629.834" Z="255.0765"/>
<CustomBehavior File="WaitTimer" WaitTime="5000" />
<CustomBehavior File="MyCTM" X="2627.811" Y="2602.582" Z="236.908" />

<!--
<CustomBehavior File="InteractWith" MobId="92072"  X="2636.41" Y="2629.834" Z="255.0765" Range="100"/>
<CustomBehavior File="WaitTimer" WaitTime="5000" />


<RunTo X="2636.773" Y="2584.197" Z="255.3958" />
<CustomBehavior File="InteractWith" MobId="91983" X="2668.16" Y="2545.319" Z="238.6316" Range="100"/>
<CustomBehavior File="WaitTimer" WaitTime="5000" />
<RunTo X="2629.261" Y="2580.883" Z="237.0791" />
<CustomBehavior File="WaitTimer" WaitTime="5000" />-->
	<CustomBehavior File="InteractWith" NumOfTimes="10" TerminateWhen="!WorldQuestInfo.HasWorldQuest(43951)">
		<HuntingGrounds>
<Hotspot X="2444.116" Y="2408.074" Z="256.478" />
<Hotspot X="2578.703" Y="2428.05" Z="234.6688" />
<Hotspot X="2659.781" Y="2457.556" Z="217.0959" />
<Hotspot X="2587.45" Y="2584.624" Z="227.827" />
<Hotspot X="2493.21" Y="2508.761" Z="255.5455" />
<Hotspot X="2458.172" Y="2575.209" Z="291.3286" />
<Hotspot X="2504.008" Y="2670.044" Z="290.6198" />
		</HuntingGrounds>
		<PursuitList>
<!--    <PursueUnit Id="247985" Priority="1" PursueWhen="!IsObjectiveComplete(1, 43951)"/>-->
<PursueGameObject Id="247985" Priority="100" PursueWhen="!IsObjectiveComplete(1, 43951) &amp;&amp; (GAMEOBJECT.IsValid)" />
		</PursuitList>
	</CustomBehavior>



<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />

</While>
	<RunTo X="1057.107" Y="6895.346" Z="176.9762" />
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
    <CustomBehavior    File="UseItem" ItemId="141605" WaitTime="2000" />
</If>

<CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Auto-Loader]: Finished World Quest An Overdue Debt - WiN!, loading auto-loader!&quot;);" />
<CustomBehavior File="LoadProfile" ProfileName="../autoloader" RememberProfile="true" />
</QuestOrder>
</HBProfile>