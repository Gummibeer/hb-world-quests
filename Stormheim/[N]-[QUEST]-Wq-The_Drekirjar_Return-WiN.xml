<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>[N-Quest] The Drekirjar Return - Win</Name>
	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>
	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>
	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>
	<TargetElites>true</TargetElites>
	<QuestOrder>
		<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			public class WorldQuestData
			{
			public int ID;
			public string Name;
			public DateTime ExpireTime;
			}
			public static class WorldQuestInfo
			{
			static List<WorldQuestData> _cache = new List<WorldQuestData>();
				static internal bool _dirty = true;
				static internal bool _setup = false;
				static WorldQuestInfo()
				{
				Setup();
				}
				public static void Setup()
				{
				if (_setup)
				return;
				Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
				Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);
				UpdateWorldQuests();
				_setup = true;
				}
				public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
				{
				_dirty = true;
				}
				public static bool HasWorldQuest(int questid)
				{
				UpdateWorldQuests();
				var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();
				if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
					return false;
					return true;
					}
					public static void UpdateWorldQuests()
					{
					if (!_dirty)
					return;
					_cache = new List<WorldQuestData>();
						var player = StyxWoW.Me;
						int BrokenIslesMapArea = 1007;
						var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
						var NumZones = int.Parse(ret[0]);
						for (int i = 1; i <= NumZones; ++i)
							{
							ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));
							var ZoneID = int.Parse(ret[0]);
							var ZoneName = ret[1];
							var ZoneDepth = int.Parse(ret[2]);
							if (ZoneDepth > 1) //Do not look at subzones
							{
							Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
							continue;
							}
							string ToRun = string.Format(@"     local questids = {{}};
							local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});
							if taskInfo then
							for i, info in ipairs(taskInfo) do
							if HaveQuestData(info.questId) then
							if QuestMapFrame_IsQuestWorldQuest(info.questId) then
							table.insert(questids, info.questId);
							end
							end
							end
							end
							return unpack(questids);
							", ZoneID, BrokenIslesMapArea);
							ret = Lua.GetReturnValues(ToRun);
							foreach (var q in ret)
							{
							int questid = int.Parse(q);
							//TimeLeft is in minutes
							var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
								var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));
								Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);
								var data = new WorldQuestData();
								data.ID = questid;
								data.Name = QuestInfo[0];
								data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
								_cache.Add(data);
								}
								}
								_dirty = false;
								}
								public static bool IsWorldQuest(int questid)
								{
								string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);
								var ret = Lua.GetReturnValues(lua);
								if (ret[3] == null)
								return false;
								return true;
								}
								}
								]]>
							</CustomBehavior>
<While Condition="WorldQuestInfo.HasWorldQuest(41949)" >
	<!-- Get in range of quest to activate -->
	<RunTo X="2106.318" Y="2408.017" Z="479.4256" />
<PickUp Nav="Fly" QuestName="The Drekirjar Return" QuestId="41949" GiverName="" GiverId="" />
<Objective QuestName="The Drekirjar Return" QuestId="41949" Type="KillMob" Nav="Fly" MobId="91566" KillCount="8" />
<Objective QuestName="The Drekirjar Return" QuestId="41949" Type="KillMob" Nav="Fly" MobId="92128" KillCount="9" />
<TurnIn Nav="Fly" QuestName="The Drekirjar Return" QuestId="41949" TurnInName="" TurnInId="" />


</While>

<!--
<Vendor Name="Felskorn Subduer" Entry="91759" Type="Repair" Nav="Fly" X="2033.662" Y="2410.366" Z="481.3768" />
<Vendor Name="Felskorn Pilferer" Entry="92128" Type="Repair" Nav="Fly" X="1944.064" Y="2639.944" Z="462.7575" />
<Vendor Name="Felskorn Executioner" Entry="91566" Type="Repair" Nav="Fly" X="2026.691" Y="2536.643" Z="487.2657" />
<Vendor Name="Felskorn Trapper" Entry="91244" Type="Repair" Nav="Fly" X="2025.479" Y="2479.106" Z="487.5708" />
<Vendor Name="Felskorn Trapper" Entry="91244" Type="Repair" Nav="Fly" X="2045.738" Y="2475.883" Z="484.5887" />
-->
<While Condition="WorldQuestInfo.HasWorldQuest(41949)" >
	<RunTo X="2106.318" Y="2408.017" Z="479.4256" />
			<CustomBehavior File="KillUntilComplete" MobIds="92128" QuestId="41949" QuestObjectiveIndex="2" TerminateWhen="IsObjectiveComplete(2, 41949)">
		<HuntingGrounds>
<Hotspot X="2054.635" Y="2345.799" Z="473.9116" />
<Hotspot X="2066.286" Y="2437.36" Z="482.4846" />
<Hotspot X="1991.239" Y="2612.91" Z="485.508" />
<Hotspot X="1952.95" Y="2645.889" Z="461.6182" />
<Hotspot X="1948.796" Y="2677.448" Z="470.7735" />
<Hotspot X="2079.936" Y="2659.727" Z="472.3663" />
		</HuntingGrounds>
	</CustomBehavior>
	
	<CustomBehavior File="KillUntilComplete" MobIds="91566,91244" QuestId="41949" QuestObjectiveIndex="1" TerminateWhen="IsObjectiveComplete(1, 41949)">
		<HuntingGrounds>
<Hotspot X="2057.919" Y="2431.302" Z="481.6402" />
<Hotspot X="1979.372" Y="2481.894" Z="481.2492" />
<Hotspot X="2002.98" Y="2531.63" Z="487.0048" />

		</HuntingGrounds>
	</CustomBehavior>
	
	

<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />

</While>
<CustomBehavior	File="UseItem" ItemId="141605" WaitTime="2000" />
						</QuestOrder>
					</HBProfile>