<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>46201-[N]-[QUEST]-Wq-By Water Be Purged-sneakingaround.xml</Name>

	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>

	<SellGrey>true</SellGrey>
	<SellWhite>false</SellWhite>
	<SellGreen>false</SellGreen>
	<SellBlue>false</SellBlue>
	<SellPurple>false</SellPurple>

	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>

	<TargetElites>true</TargetElites>

	

	<QuestOrder>
	<CustomBehavior File="RunCode" Type="Definition"><![CDATA[
			

    public class WorldQuestData
    {
        public int ID;
        public string Name;
        public DateTime ExpireTime;
    }


    public static class WorldQuestInfo
    {
        static List<WorldQuestData> _cache = new List<WorldQuestData>();
        static internal bool _dirty = true;
        static internal bool _setup = false;

        static WorldQuestInfo()
        {
            Setup();
        }

        public static void Setup()
        {
            if (_setup)
                return;

            Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);

            UpdateWorldQuests();
            _setup = true;
        }

        public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
        {
            _dirty = true;
        }

        public static bool HasWorldQuest(int questid)
        {
            UpdateWorldQuests();

            var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();

            if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
                return false;
            return true;
        }

        public static void UpdateWorldQuests()
        {
            if (!_dirty)
                return;
            _cache = new List<WorldQuestData>();
            
            var player = StyxWoW.Me;
            int BrokenIslesMapArea = 1007;

            var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
            
            var NumZones = int.Parse(ret[0]);

            for (int i = 1; i <= NumZones; ++i)
            {
                ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));

                var ZoneID = int.Parse(ret[0]);
                var ZoneName = ret[1];
                var ZoneDepth = int.Parse(ret[2]);

                if (ZoneDepth > 1) //Do not look at subzones
                {
                    Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
                    continue;
                }

                string ToRun = string.Format(@"     local questids = {{}};

                    			                    local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});

                                                    if taskInfo then
				                                                    for i, info in ipairs(taskInfo) do
					                                                    if HaveQuestData(info.questId) then
						                                                    if QuestUtils_IsQuestWorldQuest(info.questId) then
                                                                                    table.insert(questids, info.questId);
							                                                    end
						                                                    end
					                                                    end
				                                                    end
                                                   return unpack(questids);
                                                ", ZoneID, BrokenIslesMapArea);

                ret = Lua.GetReturnValues(ToRun);

                foreach (var q in ret)
                {
                    int questid = int.Parse(q);

                    //TimeLeft is in minutes
                    var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
                    var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));

                    Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);

                    var data = new WorldQuestData();
                    data.ID = questid;
                    data.Name = QuestInfo[0];
                    data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
                    _cache.Add(data);
                }
            }

            _dirty = false;
        }

        public static bool IsWorldQuest(int questid)
        {
            string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);

            var ret = Lua.GetReturnValues(lua);

            if (ret[3] == null)
                return false;
            return true;
        }
    }


				]]>
			</CustomBehavior>
	
		
		
	<While Condition="WorldQuestInfo.HasWorldQuest(46201)" >
		<MoveTo NAV="Fly" X="-1472.633" Y="2471.551" Z="0.5725992" />
		
		<If Condition="!Me.InVehicle" >
			<CustomBehavior File="InteractWith" MobIds="120085" GossipOptions="1" NonCompeteDistance="0" X="-1474.09" Y="2467.144" Z="0.1771577" />
		</If>
		<DisableBehavior Name="All"/>
		<CustomBehavior File="RunCode" Type="Definition"> <![CDATA[
			async Task ByWaterBePurged()
			{	
				if (!Me.InVehicle) return;
				if (Styx.CommonBot.Bars.ActionBar.Active.Type != Styx.CommonBot.Bars.ActionBarType.Vehicle) return;
				if (!HasQuest(46201)) return;
				var dist = 60;
				WoWUnit killTargets;
				WoWUnit Aquaclease = ObjectManager.GetObjectsOfTypeFast<WoWUnit>().FirstOrDefault(u => u.Entry == 120085);
				while (Me.InVehicle && HasQuest(46201))
				{ 
					await Coroutine.Sleep(200);
					killTargets = ObjectManager.GetObjectsOfTypeFast<WoWUnit>().Where(u => u.IsAlive && u.Distance < dist && (u.Entry == 120103 || u.Entry == 120112 || u.Entry == 120113)).OrderBy(u => u.DistanceSqr).FirstOrDefault();
					if (killTargets == null) return;
					else
					{	
						killTargets.Target();
						if (Aquaclease.HealthPercent < 70)
						{
							await CommonCoroutines.StopMoving();
							Styx.CommonBot.Bars.ActionBar.Active.Buttons[3].Use();
							await Coroutine.Wait(6000, () => Aquaclease.HealthPercent > 90);
						}
						if (killTargets.Attackable && killTargets.Distance > 30 && Styx.CommonBot.Bars.ActionBar.Active.Buttons[1].CanUse)
						{
							Styx.CommonBot.Bars.ActionBar.Active.Buttons[1].Use();
							SpellManager.ClickRemoteLocation(killTargets.Location);
							await Coroutine.Sleep(600);
						}
						if (killTargets.Attackable && killTargets.Distance < 30 && Styx.CommonBot.Bars.ActionBar.Active.Buttons[2].CanUse)
						{
							Me.SetFacing(killTargets);
							await CommonCoroutines.StopMoving();
							await Coroutine.Sleep(300);
							Styx.CommonBot.Bars.ActionBar.Active.Buttons[2].Use();
							await Coroutine.Sleep(600);
						}
						if (killTargets.Attackable && killTargets.Distance < 10 && Aquaclease.HealthPercent > 70 && Styx.CommonBot.Bars.ActionBar.Active.Buttons[2].CanUse)
						{
							Me.SetFacing(killTargets);
							await Coroutine.Sleep(700);
							Styx.CommonBot.Bars.ActionBar.Active.Buttons[0].Use();
							await Coroutine.Sleep(900);
						}
					}
				}
				return;
			}
			]]>
		</CustomBehavior>
		
		<If Condition="Me.InVehicle" >
			<MoveTo Nav="Fly" X="-1371.168" Y="2587.478" Z="43.1036" />
			<CustomBehavior File="MyCTM" TerminateWhen="!Me.InVehicle || Unit(120085, u=> u.HealthPercent &lt; 70) != null" X="-1331.418" Y="2579.284" Z="46.65654" />
			<CustomBehavior File="RunCode" Code="await ByWaterBePurged()" />
			<CustomBehavior File="MyCTM" TerminateWhen="!Me.InVehicle || Unit(120085, u=> u.HealthPercent &lt; 70) != null" X="-1292.295" Y="2641.803" Z="35.93559" />
			<CustomBehavior File="RunCode" Code="await ByWaterBePurged()" />
			<CustomBehavior File="MyCTM" TerminateWhen="!Me.InVehicle || Unit(120085, u=> u.HealthPercent &lt; 70) != null" X="-1245.483" Y="2699.26" Z="30.80453" />
			<CustomBehavior File="RunCode" Code="await ByWaterBePurged()" />
			<CustomBehavior File="MyCTM" TerminateWhen="!Me.InVehicle || Unit(120085, u=> u.HealthPercent &lt; 70) != null" X="-1307.953" Y="2750.276" Z="27.85026" />
			<CustomBehavior File="RunCode" Code="await ByWaterBePurged()" />
			<CustomBehavior File="MyCTM" TerminateWhen="!Me.InVehicle || Unit(120085, u=> u.HealthPercent &lt; 70) != null" X="-1341.013" Y="2805.973" Z="26.14199" />
			<CustomBehavior File="RunCode" Code="await ByWaterBePurged()" />
			<!-- <MoveTo Nav="Fly" X="-1289.45" Y="2640.364" Z="35.82967" /> -->
			<!-- <MoveTo Nav="Fly" X="-1225.251" Y="2674.359" Z="31.31344" /> -->
			<!-- <MoveTo Nav="Fly" X="-1070.331" Y="2620.032" Z="38.73819" /> -->
			<!-- <MoveTo Nav="Fly" X="-1306.536" Y="2758.268" Z="27.65726" /> -->
			<!-- <MoveTo Nav="Fly" X="-1347.611" Y="2870.003" Z="28.50791" /> -->
		</If>
		
	<CustomBehavior File="Misc\RunLua" WaitTime="1500" Lua="WorldMapFrame:Show()" />
	<CustomBehavior File="Misc\RunLua" Lua="WorldMapFrame:Hide()" />	
</While>
<If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0" >
    <CustomBehavior File="UseItem" ItemId="141605" WaitTime="2000" />
</If>

</QuestOrder>
</HBProfile>